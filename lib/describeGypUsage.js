"use strict";

var Immutable = require("immutable");

var DependentsRecord = Immutable.Record({
  confirmed: false,
  gypRoot: false,
  dependents: Immutable.Set()
});

function reduceMapIndexEntryToDependentsRecord (dependentsRecords, doc) {
  function reduceDependencies (dependentsRecords, dependencyName) {
    return dependentsRecords
      .update(dependencyName, function (dependentsRecord) {
        if (dependentsRecord) {
          if (dependentsRecord.dependents.has(doc.key)) {
            throw "This record has already been added as a dependent!";
          }
          return new DependentsRecord({
            confirmed: dependentsRecord.confirmed,
            gypRoot: dependentsRecord.gypRoot,
            dependents: dependentsRecord.dependents.add(doc.key)
          });
        }
        return new DependentsRecord({
          dependents: Immutable.Set().add(doc.key)
        });
      });
  }

  function updateIndexRecordEntry (existingValue) {
    if (existingValue && existingValue.confirmed) {
      throw "This record got created twice!!!";
    }

    var value = doc.value;

    return new DependentsRecord({
      confirmed: true,
      gypRoot: !!(value.gypfile || (value.scripts && value.scripts.install)),
      dependents: existingValue ? existingValue.dependents : Immutable.Set()
    });
  }

  var newDependentsRecords =
    dependentsRecords.update(doc.key, updateIndexRecordEntry);

  if (doc.value.dependencies) {
    return Object.keys(doc.value.dependencies)
      .reduce(reduceDependencies, newDependentsRecords);
  }

  return newDependentsRecords;
}

function reverseGypTree (dbIndexRows) {
  return dbIndexRows
    .reduce(reduceMapIndexEntryToDependentsRecord, Immutable.Map());
}

function calculateGypDependency (dependentsRecords) {
  // gypTree is a map of sets where the map name is the name of the project and
  // the set is the list of gyp dependencies (somewhere in the project's
  // dependency tree) that the project has.
  function depthFirstSearch (gypTree, gypRootName, currentName) {
    // There are loops in the data so we detect them by seeing if we have
    // already processed this record.
    var currentRecord = gypTree.get(currentName);
    if (currentRecord && currentRecord.has(gypRootName)) {
      return gypTree;
    }

    // We record the current node before processing the dependents so the check
    // above can catch loops.
    var newGypTree = gypTree.update(currentName, function (currentSet) {
      return (currentSet ? currentSet : Immutable.Set()).add(gypRootName);
    });

    return dependentsRecords.get(currentName).dependents
      .reduce(function (gypTree, dependentName) {
        return depthFirstSearch(gypTree, gypRootName, dependentName);
      }, newGypTree);
  }

  return dependentsRecords.filter(function (dependentRecord) {
    return dependentRecord.gypRoot;
  }).reduce(function (gypTree, __, gypRootName) {
    return depthFirstSearch(gypTree, gypRootName, gypRootName);
  }, Immutable.Map());
}

/**
 * Uses the good doc index (generated by npmLatestIndex) to generate
 * data about node-gyp usage that is sent to the console.
 * @param dbWithGoodDocIndex - PouchDB instance that has downloaded
 * the skimdb content and had the goodDocIndex run on it.
 */
function describeGypUsage (dbWithGoodDocIndex) {
  return dbWithGoodDocIndex.query('goodDocIndex')
    .then(function (docs) {
      var markedGypTree = calculateGypDependency(reverseGypTree(docs.rows));
      console.log("Total number of projects with gyp dependencies: " +
      markedGypTree.size);

      var histogram = markedGypTree
        .reduce(function (histogram, listOfGypProjects) {
          return histogram.update(listOfGypProjects.size,
            function (currentCountValue) {
              return currentCountValue ? ++currentCountValue : 1;
            });
        }, Immutable.Map());
      console.log("Histogram: " + JSON.stringify(histogram));
      var twentyFive = markedGypTree.filter(function (value) {
        return value.size === 25;
      });

      twentyFive.forEach(function (value, key) {
        console.log("twentyFive's name is " + key + " and it's value is " +
        JSON.stringify(value));
      });
    });
}

exports.describeGypUsage = describeGypUsage;